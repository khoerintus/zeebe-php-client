<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zeebe.proto

namespace ZeebeClient;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gateway_protocol.ActivateJobsRequest</code>
 */
class ActivateJobsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
     * type="payment-service" />)
     *
     * Generated from protobuf field <code>string type = 1;</code>
     */
    protected $type = '';
    /**
     * the name of the worker activating the jobs, mostly used for logging purposes
     *
     * Generated from protobuf field <code>string worker = 2;</code>
     */
    protected $worker = '';
    /**
     * a job returned after this call will not be activated by another call until the
     * timeout (in ms) has been reached
     *
     * Generated from protobuf field <code>int64 timeout = 3;</code>
     */
    protected $timeout = 0;
    /**
     * the maximum jobs to activate by this request
     *
     * Generated from protobuf field <code>int32 maxJobsToActivate = 4;</code>
     */
    protected $maxJobsToActivate = 0;
    /**
     * a list of variables to fetch as the job variables; if empty, all visible variables at
     * the time of activation for the scope of the job will be returned
     *
     * Generated from protobuf field <code>repeated string fetchVariable = 5;</code>
     */
    private $fetchVariable;
    /**
     * The request will be completed when at least one job is activated or after the requestTimeout (in ms).
     * if the requestTimeout = 0, a default timeout is used.
     * if the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.
     *
     * Generated from protobuf field <code>int64 requestTimeout = 6;</code>
     */
    protected $requestTimeout = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $type
     *           the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
     *           type="payment-service" />)
     *     @type string $worker
     *           the name of the worker activating the jobs, mostly used for logging purposes
     *     @type int|string $timeout
     *           a job returned after this call will not be activated by another call until the
     *           timeout (in ms) has been reached
     *     @type int $maxJobsToActivate
     *           the maximum jobs to activate by this request
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $fetchVariable
     *           a list of variables to fetch as the job variables; if empty, all visible variables at
     *           the time of activation for the scope of the job will be returned
     *     @type int|string $requestTimeout
     *           The request will be completed when at least one job is activated or after the requestTimeout (in ms).
     *           if the requestTimeout = 0, a default timeout is used.
     *           if the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.
     * }
     */
    public function __construct($data = NULL) {
        \ZeebeClient\Zeebe::initOnce();
        parent::__construct($data);
    }

    /**
     * the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
     * type="payment-service" />)
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
     * type="payment-service" />)
     *
     * Generated from protobuf field <code>string type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     * the name of the worker activating the jobs, mostly used for logging purposes
     *
     * Generated from protobuf field <code>string worker = 2;</code>
     * @return string
     */
    public function getWorker()
    {
        return $this->worker;
    }

    /**
     * the name of the worker activating the jobs, mostly used for logging purposes
     *
     * Generated from protobuf field <code>string worker = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setWorker($var)
    {
        GPBUtil::checkString($var, True);
        $this->worker = $var;

        return $this;
    }

    /**
     * a job returned after this call will not be activated by another call until the
     * timeout (in ms) has been reached
     *
     * Generated from protobuf field <code>int64 timeout = 3;</code>
     * @return int|string
     */
    public function getTimeout()
    {
        return $this->timeout;
    }

    /**
     * a job returned after this call will not be activated by another call until the
     * timeout (in ms) has been reached
     *
     * Generated from protobuf field <code>int64 timeout = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimeout($var)
    {
        GPBUtil::checkInt64($var);
        $this->timeout = $var;

        return $this;
    }

    /**
     * the maximum jobs to activate by this request
     *
     * Generated from protobuf field <code>int32 maxJobsToActivate = 4;</code>
     * @return int
     */
    public function getMaxJobsToActivate()
    {
        return $this->maxJobsToActivate;
    }

    /**
     * the maximum jobs to activate by this request
     *
     * Generated from protobuf field <code>int32 maxJobsToActivate = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxJobsToActivate($var)
    {
        GPBUtil::checkInt32($var);
        $this->maxJobsToActivate = $var;

        return $this;
    }

    /**
     * a list of variables to fetch as the job variables; if empty, all visible variables at
     * the time of activation for the scope of the job will be returned
     *
     * Generated from protobuf field <code>repeated string fetchVariable = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFetchVariable()
    {
        return $this->fetchVariable;
    }

    /**
     * a list of variables to fetch as the job variables; if empty, all visible variables at
     * the time of activation for the scope of the job will be returned
     *
     * Generated from protobuf field <code>repeated string fetchVariable = 5;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFetchVariable($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->fetchVariable = $arr;

        return $this;
    }

    /**
     * The request will be completed when at least one job is activated or after the requestTimeout (in ms).
     * if the requestTimeout = 0, a default timeout is used.
     * if the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.
     *
     * Generated from protobuf field <code>int64 requestTimeout = 6;</code>
     * @return int|string
     */
    public function getRequestTimeout()
    {
        return $this->requestTimeout;
    }

    /**
     * The request will be completed when at least one job is activated or after the requestTimeout (in ms).
     * if the requestTimeout = 0, a default timeout is used.
     * if the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.
     *
     * Generated from protobuf field <code>int64 requestTimeout = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRequestTimeout($var)
    {
        GPBUtil::checkInt64($var);
        $this->requestTimeout = $var;

        return $this;
    }

}

